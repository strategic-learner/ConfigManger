//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MVC02.Models.MVC02Context),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets6c4835b8da1d9dc264ce45497acfa4f0dfdc7156c8e6a94c827308fa6c32fce4))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets6c4835b8da1d9dc264ce45497acfa4f0dfdc7156c8e6a94c827308fa6c32fce4 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "6c4835b8da1d9dc264ce45497acfa4f0dfdc7156c8e6a94c827308fa6c32fce4"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.App")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Config")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam1")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam5")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam2")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam3")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam6")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam4")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.ConfigParam7")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.ParamDefinition")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.ParamType")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.ParamVersion")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.Executable")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.PathServer")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.PathShare")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.PrimaryFunction")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.JPlanLOB")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.LineOfBusiness")
            {
                return GetView18();
            }

            if (extentName == "CodeFirstDatabase.Plan")
            {
                return GetView19();
            }

            if (extentName == "CodeFirstDatabase.PathServerPathShare")
            {
                return GetView20();
            }

            if (extentName == "CodeFirstDatabase.ExecutablePathServer")
            {
                return GetView21();
            }

            if (extentName == "CodeFirstDatabase.ExecutablePrimaryFunction")
            {
                return GetView22();
            }

            if (extentName == "CodeFirstDatabase.ConfigExecutable")
            {
                return GetView23();
            }

            if (extentName == "CodeFirstDatabase.ConfigJPlanLOB")
            {
                return GetView24();
            }

            if (extentName == "CodeFirstDatabase.ConfigPlan")
            {
                return GetView25();
            }

            if (extentName == "CodeFirstDatabase.AppPlan")
            {
                return GetView26();
            }

            if (extentName == "MVC02Context.app")
            {
                return GetView27();
            }

            if (extentName == "MVC02Context.config")
            {
                return GetView28();
            }

            if (extentName == "MVC02Context.ConfigParams")
            {
                return GetView29();
            }

            if (extentName == "MVC02Context.ParamDefinition_ConfigParams")
            {
                return GetView30();
            }

            if (extentName == "MVC02Context.paramDefinitions")
            {
                return GetView31();
            }

            if (extentName == "MVC02Context.paramType")
            {
                return GetView32();
            }

            if (extentName == "MVC02Context.paramVersion")
            {
                return GetView33();
            }

            if (extentName == "MVC02Context.executable")
            {
                return GetView34();
            }

            if (extentName == "MVC02Context.pathServer")
            {
                return GetView35();
            }

            if (extentName == "MVC02Context.pathShare")
            {
                return GetView36();
            }

            if (extentName == "MVC02Context.executableFunctions")
            {
                return GetView37();
            }

            if (extentName == "MVC02Context.jPlanLOB")
            {
                return GetView38();
            }

            if (extentName == "MVC02Context.lineOfBusiness")
            {
                return GetView39();
            }

            if (extentName == "MVC02Context.plan")
            {
                return GetView40();
            }

            if (extentName == "MVC02Context.PathServer_PathShare")
            {
                return GetView41();
            }

            if (extentName == "MVC02Context.Executable_PathServers")
            {
                return GetView42();
            }

            if (extentName == "MVC02Context.Executable_PrimaryFunctions")
            {
                return GetView43();
            }

            if (extentName == "MVC02Context.Config_Executables")
            {
                return GetView44();
            }

            if (extentName == "MVC02Context.Config_JPlanLOBs")
            {
                return GetView45();
            }

            if (extentName == "MVC02Context.Config_Plans")
            {
                return GetView46();
            }

            if (extentName == "MVC02Context.App_Plans")
            {
                return GetView47();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.App.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing App
        [CodeFirstDatabaseSchema.App](T1.App_ID, T1.App_ITIL, T1.App_abbr, T1.App_descr, T1.App_createDT, T1.App_createUser, T1.App_updateDT, T1.App_updateUser)
    FROM (
        SELECT 
            T.ID AS App_ID, 
            T.ITIL AS App_ITIL, 
            T.abbr AS App_abbr, 
            T.descr AS App_descr, 
            T.createDT AS App_createDT, 
            T.createUser AS App_createUser, 
            T.updateDT AS App_updateDT, 
            T.updateUser AS App_updateUser, 
            True AS _from0
        FROM MVC02Context.app AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Config.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Config
        [CodeFirstDatabaseSchema.Config](T1.Config_ID, T1.Config_jobID, T1.Config_AppID, T1.Config_ParamVersionID, T1.Config_Active, T1.Config_DescriptonShort, T1.Config_DescriptonFull, T1.Config_effDT, T1.Config_trmDT, T1.Config_createDT, T1.Config_createUser, T1.Config_updateDT, T1.Config_updateUser)
    FROM (
        SELECT 
            T.ID AS Config_ID, 
            T.jobID AS Config_jobID, 
            T.AppID AS Config_AppID, 
            T.ParamVersionID AS Config_ParamVersionID, 
            T.Active AS Config_Active, 
            T.DescriptonShort AS Config_DescriptonShort, 
            T.DescriptonFull AS Config_DescriptonFull, 
            T.effDT AS Config_effDT, 
            T.trmDT AS Config_trmDT, 
            T.createDT AS Config_createDT, 
            T.createUser AS Config_createUser, 
            T.updateDT AS Config_updateDT, 
            T.updateUser AS Config_updateUser, 
            True AS _from0
        FROM MVC02Context.config AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam
        [CodeFirstDatabaseSchema.ConfigParam](T3.ConfigParam_ID, T3.ConfigParam_ConfigID, T3.ConfigParam_effDT, T3.ConfigParam_trmDT, T3.ConfigParam_ParamDefinitionsID, T3.ConfigParam_isRefOnly, T3.ConfigParam_value, T3.ConfigParam_valueUseageComments, T3.ConfigParam_createDT, T3.ConfigParam_createUser, T3.ConfigParam_updateDT, T3.ConfigParam_updateUser, T3.[ConfigParam.ParamDefinition_ID])
    FROM (
        SELECT T1.ConfigParam_ID, T1.ConfigParam_ConfigID, T1.ConfigParam_effDT, T1.ConfigParam_trmDT, T1.ConfigParam_ParamDefinitionsID, T1.ConfigParam_isRefOnly, T1.ConfigParam_value, T1.ConfigParam_valueUseageComments, T1.ConfigParam_createDT, T1.ConfigParam_createUser, T1.ConfigParam_updateDT, T1.ConfigParam_updateUser, T2.[ConfigParam.ParamDefinition_ID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.ID AS ConfigParam_ID, 
                T.ConfigID AS ConfigParam_ConfigID, 
                T.effDT AS ConfigParam_effDT, 
                T.trmDT AS ConfigParam_trmDT, 
                T.ParamDefinitionsID AS ConfigParam_ParamDefinitionsID, 
                T.isRefOnly AS ConfigParam_isRefOnly, 
                T.[value] AS ConfigParam_value, 
                T.valueUseageComments AS ConfigParam_valueUseageComments, 
                T.createDT AS ConfigParam_createDT, 
                T.createUser AS ConfigParam_createUser, 
                T.updateDT AS ConfigParam_updateDT, 
                T.updateUser AS ConfigParam_updateUser, 
                True AS _from0
            FROM MVC02Context.ConfigParams AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ParamDefinition_ConfigParams_Target).ID AS ConfigParam_ID, 
                Key(T.ParamDefinition_ConfigParams_Source).ID AS [ConfigParam.ParamDefinition_ID], 
                True AS _from1
            FROM MVC02Context.ParamDefinition_ConfigParams AS T) AS T2
            ON T1.ConfigParam_ID = T2.ConfigParam_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam1
        [CodeFirstDatabaseSchema.ConfigParam1](T1.ConfigParam1_ID)
    FROM (
        SELECT 
            T.ID AS ConfigParam1_ID, 
            True AS _from0
        FROM MVC02Context.ConfigParams AS T
        WHERE T IS OF (ONLY [MVC02.Models.ConfigParamDEV1])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam5.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam5
        [CodeFirstDatabaseSchema.ConfigParam5](T1.ConfigParam5_ID)
    FROM (
        SELECT 
            T.ID AS ConfigParam5_ID, 
            True AS _from0
        FROM MVC02Context.ConfigParams AS T
        WHERE T IS OF (ONLY [MVC02.Models.ConfigParamDEV2])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam2.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam2
        [CodeFirstDatabaseSchema.ConfigParam2](T1.ConfigParam2_ID)
    FROM (
        SELECT 
            T.ID AS ConfigParam2_ID, 
            True AS _from0
        FROM MVC02Context.ConfigParams AS T
        WHERE T IS OF (ONLY [MVC02.Models.ConfigParamPROD])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam3.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam3
        [CodeFirstDatabaseSchema.ConfigParam3](T1.ConfigParam3_ID)
    FROM (
        SELECT 
            T.ID AS ConfigParam3_ID, 
            True AS _from0
        FROM MVC02Context.ConfigParams AS T
        WHERE T IS OF (ONLY [MVC02.Models.ConfigParamQA1])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam6.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam6
        [CodeFirstDatabaseSchema.ConfigParam6](T1.ConfigParam6_ID)
    FROM (
        SELECT 
            T.ID AS ConfigParam6_ID, 
            True AS _from0
        FROM MVC02Context.ConfigParams AS T
        WHERE T IS OF (ONLY [MVC02.Models.ConfigParamQA2])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam4.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam4
        [CodeFirstDatabaseSchema.ConfigParam4](T1.ConfigParam4_ID)
    FROM (
        SELECT 
            T.ID AS ConfigParam4_ID, 
            True AS _from0
        FROM MVC02Context.ConfigParams AS T
        WHERE T IS OF (ONLY [MVC02.Models.ConfigParamSTG1])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigParam7.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParam7
        [CodeFirstDatabaseSchema.ConfigParam7](T1.ConfigParam7_ID)
    FROM (
        SELECT 
            T.ID AS ConfigParam7_ID, 
            True AS _from0
        FROM MVC02Context.ConfigParams AS T
        WHERE T IS OF (ONLY [MVC02.Models.ConfigParamSTG2])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ParamDefinition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParamDefinition
        [CodeFirstDatabaseSchema.ParamDefinition](T1.ParamDefinition_ID, T1.ParamDefinition_ParamVersionID, T1.ParamDefinition_ParamSequence, T1.ParamDefinition_ParamTypeID, T1.ParamDefinition_variableName, T1.ParamDefinition_intendedUse, T1.ParamDefinition_createDT, T1.ParamDefinition_createUser, T1.ParamDefinition_updateDT, T1.ParamDefinition_updateUser)
    FROM (
        SELECT 
            T.ID AS ParamDefinition_ID, 
            T.ParamVersionID AS ParamDefinition_ParamVersionID, 
            T.ParamSequence AS ParamDefinition_ParamSequence, 
            T.ParamTypeID AS ParamDefinition_ParamTypeID, 
            T.variableName AS ParamDefinition_variableName, 
            T.intendedUse AS ParamDefinition_intendedUse, 
            T.createDT AS ParamDefinition_createDT, 
            T.createUser AS ParamDefinition_createUser, 
            T.updateDT AS ParamDefinition_updateDT, 
            T.updateUser AS ParamDefinition_updateUser, 
            True AS _from0
        FROM MVC02Context.paramDefinitions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ParamType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParamType
        [CodeFirstDatabaseSchema.ParamType](T1.ParamType_ID, T1.ParamType_type, T1.ParamType_createDT, T1.ParamType_createUser, T1.ParamType_updateDT, T1.ParamType_updateUser)
    FROM (
        SELECT 
            T.ID AS ParamType_ID, 
            T.type AS ParamType_type, 
            T.createDT AS ParamType_createDT, 
            T.createUser AS ParamType_createUser, 
            T.updateDT AS ParamType_updateDT, 
            T.updateUser AS ParamType_updateUser, 
            True AS _from0
        FROM MVC02Context.paramType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ParamVersion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParamVersion
        [CodeFirstDatabaseSchema.ParamVersion](T1.ParamVersion_ID, T1.ParamVersion_Version, T1.ParamVersion_description, T1.ParamVersion_createDT, T1.ParamVersion_createUser, T1.ParamVersion_updateDT, T1.ParamVersion_updateUser)
    FROM (
        SELECT 
            T.ID AS ParamVersion_ID, 
            T.Version AS ParamVersion_Version, 
            T.description AS ParamVersion_description, 
            T.createDT AS ParamVersion_createDT, 
            T.createUser AS ParamVersion_createUser, 
            T.updateDT AS ParamVersion_updateDT, 
            T.updateUser AS ParamVersion_updateUser, 
            True AS _from0
        FROM MVC02Context.paramVersion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Executable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Executable
        [CodeFirstDatabaseSchema.Executable](T1.Executable_ID, T1.Executable_ParamVersionID, T1.Executable_AppID, T1.Executable_nameWExtension, T1.Executable_description, T1.Executable_createDT, T1.Executable_createUser, T1.Executable_updateDT, T1.Executable_updateUser)
    FROM (
        SELECT 
            T.ID AS Executable_ID, 
            T.ParamVersionID AS Executable_ParamVersionID, 
            T.AppID AS Executable_AppID, 
            T.nameWExtension AS Executable_nameWExtension, 
            T.description AS Executable_description, 
            T.createDT AS Executable_createDT, 
            T.createUser AS Executable_createUser, 
            T.updateDT AS Executable_updateDT, 
            T.updateUser AS Executable_updateUser, 
            True AS _from0
        FROM MVC02Context.executable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PathServer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PathServer
        [CodeFirstDatabaseSchema.PathServer](T1.PathServer_ID, T1.PathServer_server, T1.PathServer_path, T1.PathServer_createDT, T1.PathServer_createUser, T1.PathServer_updateDT, T1.PathServer_updateUser)
    FROM (
        SELECT 
            T.ID AS PathServer_ID, 
            T.server AS PathServer_server, 
            T.path AS PathServer_path, 
            T.createDT AS PathServer_createDT, 
            T.createUser AS PathServer_createUser, 
            T.updateDT AS PathServer_updateDT, 
            T.updateUser AS PathServer_updateUser, 
            True AS _from0
        FROM MVC02Context.pathServer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PathShare.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PathShare
        [CodeFirstDatabaseSchema.PathShare](T1.PathShare_ID, T1.PathShare_share, T1.PathShare_path, T1.PathShare_createDT, T1.PathShare_createUser, T1.PathShare_updateDT, T1.PathShare_updateUser)
    FROM (
        SELECT 
            T.ID AS PathShare_ID, 
            T.share AS PathShare_share, 
            T.path AS PathShare_path, 
            T.createDT AS PathShare_createDT, 
            T.createUser AS PathShare_createUser, 
            T.updateDT AS PathShare_updateDT, 
            T.updateUser AS PathShare_updateUser, 
            True AS _from0
        FROM MVC02Context.pathShare AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PrimaryFunction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PrimaryFunction
        [CodeFirstDatabaseSchema.PrimaryFunction](T1.PrimaryFunction_ID, T1.PrimaryFunction_abbr, T1.PrimaryFunction_description, T1.PrimaryFunction_createDT, T1.PrimaryFunction_createUser, T1.PrimaryFunction_updateDT, T1.PrimaryFunction_updateUser)
    FROM (
        SELECT 
            T.ID AS PrimaryFunction_ID, 
            T.abbr AS PrimaryFunction_abbr, 
            T.description AS PrimaryFunction_description, 
            T.createDT AS PrimaryFunction_createDT, 
            T.createUser AS PrimaryFunction_createUser, 
            T.updateDT AS PrimaryFunction_updateDT, 
            T.updateUser AS PrimaryFunction_updateUser, 
            True AS _from0
        FROM MVC02Context.executableFunctions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.JPlanLOB.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing JPlanLOB
        [CodeFirstDatabaseSchema.JPlanLOB](T1.JPlanLOB_ID, T1.JPlanLOB_planID, T1.JPlanLOB_LineOfBusinessID, T1.JPlanLOB_createDT, T1.JPlanLOB_createUser, T1.JPlanLOB_updateDT, T1.JPlanLOB_updateUser)
    FROM (
        SELECT 
            T.ID AS JPlanLOB_ID, 
            T.planID AS JPlanLOB_planID, 
            T.LineOfBusinessID AS JPlanLOB_LineOfBusinessID, 
            T.createDT AS JPlanLOB_createDT, 
            T.createUser AS JPlanLOB_createUser, 
            T.updateDT AS JPlanLOB_updateDT, 
            T.updateUser AS JPlanLOB_updateUser, 
            True AS _from0
        FROM MVC02Context.jPlanLOB AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.LineOfBusiness.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing LineOfBusiness
        [CodeFirstDatabaseSchema.LineOfBusiness](T1.LineOfBusiness_ID, T1.LineOfBusiness_abbr, T1.LineOfBusiness_descr, T1.LineOfBusiness_createDT, T1.LineOfBusiness_createUser, T1.LineOfBusiness_updateDT, T1.LineOfBusiness_updateUser)
    FROM (
        SELECT 
            T.ID AS LineOfBusiness_ID, 
            T.abbr AS LineOfBusiness_abbr, 
            T.descr AS LineOfBusiness_descr, 
            T.createDT AS LineOfBusiness_createDT, 
            T.createUser AS LineOfBusiness_createUser, 
            T.updateDT AS LineOfBusiness_updateDT, 
            T.updateUser AS LineOfBusiness_updateUser, 
            True AS _from0
        FROM MVC02Context.lineOfBusiness AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Plan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Plan
        [CodeFirstDatabaseSchema.Plan](T1.Plan_ID, T1.Plan_abbr, T1.Plan_descr, T1.Plan_createDT, T1.Plan_createUser, T1.Plan_updateDT, T1.Plan_updateUser)
    FROM (
        SELECT 
            T.ID AS Plan_ID, 
            T.abbr AS Plan_abbr, 
            T.descr AS Plan_descr, 
            T.createDT AS Plan_createDT, 
            T.createUser AS Plan_createUser, 
            T.updateDT AS Plan_updateDT, 
            T.updateUser AS Plan_updateUser, 
            True AS _from0
        FROM MVC02Context.plan AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PathServerPathShare.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PathServerPathShare
        [CodeFirstDatabaseSchema.PathServerPathShare](T1.PathServerPathShare_pathServer, T1.PathServerPathShare_pathShare)
    FROM (
        SELECT 
            Key(T.PathServer_PathShare_Source).ID AS PathServerPathShare_pathServer, 
            Key(T.PathServer_PathShare_Target).ID AS PathServerPathShare_pathShare, 
            True AS _from0
        FROM MVC02Context.PathServer_PathShare AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ExecutablePathServer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ExecutablePathServer
        [CodeFirstDatabaseSchema.ExecutablePathServer](T1.ExecutablePathServer_pathServer, T1.ExecutablePathServer_executable)
    FROM (
        SELECT 
            Key(T.Executable_PathServers_Source).ID AS ExecutablePathServer_pathServer, 
            Key(T.Executable_PathServers_Target).ID AS ExecutablePathServer_executable, 
            True AS _from0
        FROM MVC02Context.Executable_PathServers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ExecutablePrimaryFunction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ExecutablePrimaryFunction
        [CodeFirstDatabaseSchema.ExecutablePrimaryFunction](T1.ExecutablePrimaryFunction_primaryFunction, T1.ExecutablePrimaryFunction_executable)
    FROM (
        SELECT 
            Key(T.Executable_PrimaryFunctions_Source).ID AS ExecutablePrimaryFunction_primaryFunction, 
            Key(T.Executable_PrimaryFunctions_Target).ID AS ExecutablePrimaryFunction_executable, 
            True AS _from0
        FROM MVC02Context.Executable_PrimaryFunctions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigExecutable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigExecutable
        [CodeFirstDatabaseSchema.ConfigExecutable](T1.ConfigExecutable_executable, T1.ConfigExecutable_config)
    FROM (
        SELECT 
            Key(T.Config_Executables_Source).ID AS ConfigExecutable_executable, 
            Key(T.Config_Executables_Target).ID AS ConfigExecutable_config, 
            True AS _from0
        FROM MVC02Context.Config_Executables AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigJPlanLOB.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigJPlanLOB
        [CodeFirstDatabaseSchema.ConfigJPlanLOB](T1.ConfigJPlanLOB_jPlanLOB, T1.ConfigJPlanLOB_config)
    FROM (
        SELECT 
            Key(T.Config_JPlanLOBs_Source).ID AS ConfigJPlanLOB_jPlanLOB, 
            Key(T.Config_JPlanLOBs_Target).ID AS ConfigJPlanLOB_config, 
            True AS _from0
        FROM MVC02Context.Config_JPlanLOBs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigPlan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigPlan
        [CodeFirstDatabaseSchema.ConfigPlan](T1.ConfigPlan_plan, T1.ConfigPlan_config)
    FROM (
        SELECT 
            Key(T.Config_Plans_Source).ID AS ConfigPlan_plan, 
            Key(T.Config_Plans_Target).ID AS ConfigPlan_config, 
            True AS _from0
        FROM MVC02Context.Config_Plans AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AppPlan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AppPlan
        [CodeFirstDatabaseSchema.AppPlan](T1.AppPlan_app, T1.AppPlan_plan)
    FROM (
        SELECT 
            Key(T.App_Plans_Source).ID AS AppPlan_app, 
            Key(T.App_Plans_Target).ID AS AppPlan_plan, 
            True AS _from0
        FROM MVC02Context.App_Plans AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.app.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing app
        [MVC02.Models.App](T1.App_ID, T1.App_ITIL, T1.App_abbr, T1.App_descr, T1.App_createDT, T1.App_createUser, T1.App_updateDT, T1.App_updateUser)
    FROM (
        SELECT 
            T.ID AS App_ID, 
            T.ITIL AS App_ITIL, 
            T.abbr AS App_abbr, 
            T.descr AS App_descr, 
            T.createDT AS App_createDT, 
            T.createUser AS App_createUser, 
            T.updateDT AS App_updateDT, 
            T.updateUser AS App_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.App AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.config.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing config
        [MVC02.Models.Config](T1.Config_ID, T1.Config_jobID, T1.Config_AppID, T1.Config_ParamVersionID, T1.Config_Active, T1.Config_DescriptonShort, T1.Config_DescriptonFull, T1.Config_effDT, T1.Config_trmDT, T1.Config_createDT, T1.Config_createUser, T1.Config_updateDT, T1.Config_updateUser)
    FROM (
        SELECT 
            T.ID AS Config_ID, 
            T.jobID AS Config_jobID, 
            T.AppID AS Config_AppID, 
            T.ParamVersionID AS Config_ParamVersionID, 
            T.Active AS Config_Active, 
            T.DescriptonShort AS Config_DescriptonShort, 
            T.DescriptonFull AS Config_DescriptonFull, 
            T.effDT AS Config_effDT, 
            T.trmDT AS Config_trmDT, 
            T.createDT AS Config_createDT, 
            T.createUser AS Config_createUser, 
            T.updateDT AS Config_updateDT, 
            T.updateUser AS Config_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.Config AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.ConfigParams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigParams
        CASE
            WHEN T10._from1 THEN [MVC02.Models.ConfigParamDEV1](T10.ConfigParam_ID, T10.ConfigParam_ConfigID, T10.ConfigParam_effDT, T10.ConfigParam_trmDT, T10.ConfigParam_ParamDefinitionsID, T10.ConfigParam_isRefOnly, T10.ConfigParam_value, T10.ConfigParam_valueUseageComments, T10.ConfigParam_createDT, T10.ConfigParam_createUser, T10.ConfigParam_updateDT, T10.ConfigParam_updateUser) WITH 
                RELATIONSHIP(CREATEREF(MVC02Context.paramDefinitions, ROW(T10.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]),[MVC02.Models.ParamDefinition]),[MVC02.Models.ParamDefinition_ConfigParams],ParamDefinition_ConfigParams_Target,ParamDefinition_ConfigParams_Source) 
            WHEN T10._from2 THEN [MVC02.Models.ConfigParamDEV2](T10.ConfigParam_ID, T10.ConfigParam_ConfigID, T10.ConfigParam_effDT, T10.ConfigParam_trmDT, T10.ConfigParam_ParamDefinitionsID, T10.ConfigParam_isRefOnly, T10.ConfigParam_value, T10.ConfigParam_valueUseageComments, T10.ConfigParam_createDT, T10.ConfigParam_createUser, T10.ConfigParam_updateDT, T10.ConfigParam_updateUser) WITH 
                RELATIONSHIP(CREATEREF(MVC02Context.paramDefinitions, ROW(T10.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]),[MVC02.Models.ParamDefinition]),[MVC02.Models.ParamDefinition_ConfigParams],ParamDefinition_ConfigParams_Target,ParamDefinition_ConfigParams_Source) 
            WHEN T10._from3 THEN [MVC02.Models.ConfigParamPROD](T10.ConfigParam_ID, T10.ConfigParam_ConfigID, T10.ConfigParam_effDT, T10.ConfigParam_trmDT, T10.ConfigParam_ParamDefinitionsID, T10.ConfigParam_isRefOnly, T10.ConfigParam_value, T10.ConfigParam_valueUseageComments, T10.ConfigParam_createDT, T10.ConfigParam_createUser, T10.ConfigParam_updateDT, T10.ConfigParam_updateUser) WITH 
                RELATIONSHIP(CREATEREF(MVC02Context.paramDefinitions, ROW(T10.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]),[MVC02.Models.ParamDefinition]),[MVC02.Models.ParamDefinition_ConfigParams],ParamDefinition_ConfigParams_Target,ParamDefinition_ConfigParams_Source) 
            WHEN T10._from4 THEN [MVC02.Models.ConfigParamQA1](T10.ConfigParam_ID, T10.ConfigParam_ConfigID, T10.ConfigParam_effDT, T10.ConfigParam_trmDT, T10.ConfigParam_ParamDefinitionsID, T10.ConfigParam_isRefOnly, T10.ConfigParam_value, T10.ConfigParam_valueUseageComments, T10.ConfigParam_createDT, T10.ConfigParam_createUser, T10.ConfigParam_updateDT, T10.ConfigParam_updateUser) WITH 
                RELATIONSHIP(CREATEREF(MVC02Context.paramDefinitions, ROW(T10.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]),[MVC02.Models.ParamDefinition]),[MVC02.Models.ParamDefinition_ConfigParams],ParamDefinition_ConfigParams_Target,ParamDefinition_ConfigParams_Source) 
            WHEN T10._from5 THEN [MVC02.Models.ConfigParamQA2](T10.ConfigParam_ID, T10.ConfigParam_ConfigID, T10.ConfigParam_effDT, T10.ConfigParam_trmDT, T10.ConfigParam_ParamDefinitionsID, T10.ConfigParam_isRefOnly, T10.ConfigParam_value, T10.ConfigParam_valueUseageComments, T10.ConfigParam_createDT, T10.ConfigParam_createUser, T10.ConfigParam_updateDT, T10.ConfigParam_updateUser) WITH 
                RELATIONSHIP(CREATEREF(MVC02Context.paramDefinitions, ROW(T10.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]),[MVC02.Models.ParamDefinition]),[MVC02.Models.ParamDefinition_ConfigParams],ParamDefinition_ConfigParams_Target,ParamDefinition_ConfigParams_Source) 
            WHEN T10._from6 THEN [MVC02.Models.ConfigParamSTG1](T10.ConfigParam_ID, T10.ConfigParam_ConfigID, T10.ConfigParam_effDT, T10.ConfigParam_trmDT, T10.ConfigParam_ParamDefinitionsID, T10.ConfigParam_isRefOnly, T10.ConfigParam_value, T10.ConfigParam_valueUseageComments, T10.ConfigParam_createDT, T10.ConfigParam_createUser, T10.ConfigParam_updateDT, T10.ConfigParam_updateUser) WITH 
                RELATIONSHIP(CREATEREF(MVC02Context.paramDefinitions, ROW(T10.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]),[MVC02.Models.ParamDefinition]),[MVC02.Models.ParamDefinition_ConfigParams],ParamDefinition_ConfigParams_Target,ParamDefinition_ConfigParams_Source) 
            ELSE [MVC02.Models.ConfigParamSTG2](T10.ConfigParam_ID, T10.ConfigParam_ConfigID, T10.ConfigParam_effDT, T10.ConfigParam_trmDT, T10.ConfigParam_ParamDefinitionsID, T10.ConfigParam_isRefOnly, T10.ConfigParam_value, T10.ConfigParam_valueUseageComments, T10.ConfigParam_createDT, T10.ConfigParam_createUser, T10.ConfigParam_updateDT, T10.ConfigParam_updateUser) WITH 
                RELATIONSHIP(CREATEREF(MVC02Context.paramDefinitions, ROW(T10.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]),[MVC02.Models.ParamDefinition]),[MVC02.Models.ParamDefinition_ConfigParams],ParamDefinition_ConfigParams_Target,ParamDefinition_ConfigParams_Source) 
        END
    FROM (
        SELECT T8.ConfigParam_ID, T9.ConfigParam_ConfigID, T9.ConfigParam_effDT, T9.ConfigParam_trmDT, T9.ConfigParam_ParamDefinitionsID, T9.ConfigParam_isRefOnly, T9.ConfigParam_value, T9.ConfigParam_valueUseageComments, T9.ConfigParam_createDT, T9.ConfigParam_createUser, T9.ConfigParam_updateDT, T9.ConfigParam_updateUser, T9._from0, T8._from1, T8._from2, T8._from3, T8._from4, T8._from5, T8._from6, T8._from7, T9.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]
        FROM  ( (
                SELECT 
                    T.ID AS ConfigParam_ID, 
                    True AS _from1, 
                    False AS _from2, 
                    False AS _from3, 
                    False AS _from4, 
                    False AS _from5, 
                    False AS _from6, 
                    False AS _from7
                FROM CodeFirstDatabase.ConfigParam1 AS T)
                UNION ALL (
                SELECT 
                    T.ID AS ConfigParam_ID, 
                    False AS _from1, 
                    False AS _from2, 
                    False AS _from3, 
                    False AS _from4, 
                    False AS _from5, 
                    False AS _from6, 
                    True AS _from7
                FROM CodeFirstDatabase.ConfigParam7 AS T)
                UNION ALL (
                SELECT 
                    T.ID AS ConfigParam_ID, 
                    False AS _from1, 
                    True AS _from2, 
                    False AS _from3, 
                    False AS _from4, 
                    False AS _from5, 
                    False AS _from6, 
                    False AS _from7
                FROM CodeFirstDatabase.ConfigParam5 AS T)
                UNION ALL (
                SELECT 
                    T.ID AS ConfigParam_ID, 
                    False AS _from1, 
                    False AS _from2, 
                    True AS _from3, 
                    False AS _from4, 
                    False AS _from5, 
                    False AS _from6, 
                    False AS _from7
                FROM CodeFirstDatabase.ConfigParam2 AS T)
                UNION ALL (
                SELECT 
                    T.ID AS ConfigParam_ID, 
                    False AS _from1, 
                    False AS _from2, 
                    False AS _from3, 
                    True AS _from4, 
                    False AS _from5, 
                    False AS _from6, 
                    False AS _from7
                FROM CodeFirstDatabase.ConfigParam3 AS T)
                UNION ALL (
                SELECT 
                    T.ID AS ConfigParam_ID, 
                    False AS _from1, 
                    False AS _from2, 
                    False AS _from3, 
                    False AS _from4, 
                    True AS _from5, 
                    False AS _from6, 
                    False AS _from7
                FROM CodeFirstDatabase.ConfigParam6 AS T)
                UNION ALL (
                SELECT 
                    T.ID AS ConfigParam_ID, 
                    False AS _from1, 
                    False AS _from2, 
                    False AS _from3, 
                    False AS _from4, 
                    False AS _from5, 
                    True AS _from6, 
                    False AS _from7
                FROM CodeFirstDatabase.ConfigParam4 AS T)) AS T8
            INNER JOIN (
            SELECT 
                T.ID AS ConfigParam_ID, 
                T.ConfigID AS ConfigParam_ConfigID, 
                T.effDT AS ConfigParam_effDT, 
                T.trmDT AS ConfigParam_trmDT, 
                T.ParamDefinitionsID AS ConfigParam_ParamDefinitionsID, 
                T.isRefOnly AS ConfigParam_isRefOnly, 
                T.[value] AS ConfigParam_value, 
                T.valueUseageComments AS ConfigParam_valueUseageComments, 
                T.createDT AS ConfigParam_createDT, 
                T.createUser AS ConfigParam_createUser, 
                T.updateDT AS ConfigParam_updateDT, 
                T.updateUser AS ConfigParam_updateUser, 
                True AS _from0, 
                T.ParamDefinition_ID AS [ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]
            FROM CodeFirstDatabase.ConfigParam AS T) AS T9
            ON T8.ConfigParam_ID = T9.ConfigParam_ID
    ) AS T10");
        }

        /// <summary>
        /// Gets the view for MVC02Context.ParamDefinition_ConfigParams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ParamDefinition_ConfigParams
        [MVC02.Models.ParamDefinition_ConfigParams](T3.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source], T3.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Target])
    FROM (
        SELECT -- Constructing ParamDefinition_ConfigParams_Source
            CreateRef(MVC02Context.paramDefinitions, row(T2.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID]), [MVC02.Models.ParamDefinition]) AS [ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source], 
            T2.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Target]
        FROM (
            SELECT -- Constructing ParamDefinition_ConfigParams_Target
                T1.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID], 
                CreateRef(MVC02Context.ConfigParams, row(T1.[ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Target.ID]), [MVC02.Models.ConfigParam]) AS [ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Target]
            FROM (
                SELECT 
                    T.ParamDefinition_ID AS [ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Source.ID], 
                    T.ID AS [ParamDefinition_ConfigParams.ParamDefinition_ConfigParams_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ConfigParam AS T
                WHERE T.ParamDefinition_ID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MVC02Context.paramDefinitions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing paramDefinitions
        [MVC02.Models.ParamDefinition](T1.ParamDefinition_ID, T1.ParamDefinition_ParamVersionID, T1.ParamDefinition_ParamSequence, T1.ParamDefinition_ParamTypeID, T1.ParamDefinition_variableName, T1.ParamDefinition_intendedUse, T1.ParamDefinition_createDT, T1.ParamDefinition_createUser, T1.ParamDefinition_updateDT, T1.ParamDefinition_updateUser)
    FROM (
        SELECT 
            T.ID AS ParamDefinition_ID, 
            T.ParamVersionID AS ParamDefinition_ParamVersionID, 
            T.ParamSequence AS ParamDefinition_ParamSequence, 
            T.ParamTypeID AS ParamDefinition_ParamTypeID, 
            T.variableName AS ParamDefinition_variableName, 
            T.intendedUse AS ParamDefinition_intendedUse, 
            T.createDT AS ParamDefinition_createDT, 
            T.createUser AS ParamDefinition_createUser, 
            T.updateDT AS ParamDefinition_updateDT, 
            T.updateUser AS ParamDefinition_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.ParamDefinition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.paramType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing paramType
        [MVC02.Models.ParamType](T1.ParamType_ID, T1.ParamType_type, T1.ParamType_createDT, T1.ParamType_createUser, T1.ParamType_updateDT, T1.ParamType_updateUser)
    FROM (
        SELECT 
            T.ID AS ParamType_ID, 
            T.type AS ParamType_type, 
            T.createDT AS ParamType_createDT, 
            T.createUser AS ParamType_createUser, 
            T.updateDT AS ParamType_updateDT, 
            T.updateUser AS ParamType_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.ParamType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.paramVersion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing paramVersion
        [MVC02.Models.ParamVersion](T1.ParamVersion_ID, T1.ParamVersion_Version, T1.ParamVersion_description, T1.ParamVersion_createDT, T1.ParamVersion_createUser, T1.ParamVersion_updateDT, T1.ParamVersion_updateUser)
    FROM (
        SELECT 
            T.ID AS ParamVersion_ID, 
            T.Version AS ParamVersion_Version, 
            T.description AS ParamVersion_description, 
            T.createDT AS ParamVersion_createDT, 
            T.createUser AS ParamVersion_createUser, 
            T.updateDT AS ParamVersion_updateDT, 
            T.updateUser AS ParamVersion_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.ParamVersion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.executable.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing executable
        [MVC02.Models.Executable](T1.Executable_ID, T1.Executable_ParamVersionID, T1.Executable_AppID, T1.Executable_nameWExtension, T1.Executable_description, T1.Executable_createDT, T1.Executable_createUser, T1.Executable_updateDT, T1.Executable_updateUser)
    FROM (
        SELECT 
            T.ID AS Executable_ID, 
            T.ParamVersionID AS Executable_ParamVersionID, 
            T.AppID AS Executable_AppID, 
            T.nameWExtension AS Executable_nameWExtension, 
            T.description AS Executable_description, 
            T.createDT AS Executable_createDT, 
            T.createUser AS Executable_createUser, 
            T.updateDT AS Executable_updateDT, 
            T.updateUser AS Executable_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.Executable AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.pathServer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing pathServer
        [MVC02.Models.PathServer](T1.PathServer_ID, T1.PathServer_server, T1.PathServer_path, T1.PathServer_createDT, T1.PathServer_createUser, T1.PathServer_updateDT, T1.PathServer_updateUser)
    FROM (
        SELECT 
            T.ID AS PathServer_ID, 
            T.server AS PathServer_server, 
            T.path AS PathServer_path, 
            T.createDT AS PathServer_createDT, 
            T.createUser AS PathServer_createUser, 
            T.updateDT AS PathServer_updateDT, 
            T.updateUser AS PathServer_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.PathServer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.pathShare.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing pathShare
        [MVC02.Models.PathShare](T1.PathShare_ID, T1.PathShare_share, T1.PathShare_path, T1.PathShare_createDT, T1.PathShare_createUser, T1.PathShare_updateDT, T1.PathShare_updateUser)
    FROM (
        SELECT 
            T.ID AS PathShare_ID, 
            T.share AS PathShare_share, 
            T.path AS PathShare_path, 
            T.createDT AS PathShare_createDT, 
            T.createUser AS PathShare_createUser, 
            T.updateDT AS PathShare_updateDT, 
            T.updateUser AS PathShare_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.PathShare AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.executableFunctions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing executableFunctions
        [MVC02.Models.PrimaryFunction](T1.PrimaryFunction_ID, T1.PrimaryFunction_abbr, T1.PrimaryFunction_description, T1.PrimaryFunction_createDT, T1.PrimaryFunction_createUser, T1.PrimaryFunction_updateDT, T1.PrimaryFunction_updateUser)
    FROM (
        SELECT 
            T.ID AS PrimaryFunction_ID, 
            T.abbr AS PrimaryFunction_abbr, 
            T.description AS PrimaryFunction_description, 
            T.createDT AS PrimaryFunction_createDT, 
            T.createUser AS PrimaryFunction_createUser, 
            T.updateDT AS PrimaryFunction_updateDT, 
            T.updateUser AS PrimaryFunction_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.PrimaryFunction AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.jPlanLOB.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing jPlanLOB
        [MVC02.Models.JPlanLOB](T1.JPlanLOB_ID, T1.JPlanLOB_planID, T1.JPlanLOB_LineOfBusinessID, T1.JPlanLOB_createDT, T1.JPlanLOB_createUser, T1.JPlanLOB_updateDT, T1.JPlanLOB_updateUser)
    FROM (
        SELECT 
            T.ID AS JPlanLOB_ID, 
            T.planID AS JPlanLOB_planID, 
            T.LineOfBusinessID AS JPlanLOB_LineOfBusinessID, 
            T.createDT AS JPlanLOB_createDT, 
            T.createUser AS JPlanLOB_createUser, 
            T.updateDT AS JPlanLOB_updateDT, 
            T.updateUser AS JPlanLOB_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.JPlanLOB AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.lineOfBusiness.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing lineOfBusiness
        [MVC02.Models.LineOfBusiness](T1.LineOfBusiness_ID, T1.LineOfBusiness_abbr, T1.LineOfBusiness_descr, T1.LineOfBusiness_createDT, T1.LineOfBusiness_createUser, T1.LineOfBusiness_updateDT, T1.LineOfBusiness_updateUser)
    FROM (
        SELECT 
            T.ID AS LineOfBusiness_ID, 
            T.abbr AS LineOfBusiness_abbr, 
            T.descr AS LineOfBusiness_descr, 
            T.createDT AS LineOfBusiness_createDT, 
            T.createUser AS LineOfBusiness_createUser, 
            T.updateDT AS LineOfBusiness_updateDT, 
            T.updateUser AS LineOfBusiness_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.LineOfBusiness AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.plan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing plan
        [MVC02.Models.Plan](T1.Plan_ID, T1.Plan_abbr, T1.Plan_descr, T1.Plan_createDT, T1.Plan_createUser, T1.Plan_updateDT, T1.Plan_updateUser)
    FROM (
        SELECT 
            T.ID AS Plan_ID, 
            T.abbr AS Plan_abbr, 
            T.descr AS Plan_descr, 
            T.createDT AS Plan_createDT, 
            T.createUser AS Plan_createUser, 
            T.updateDT AS Plan_updateDT, 
            T.updateUser AS Plan_updateUser, 
            True AS _from0
        FROM CodeFirstDatabase.Plan AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MVC02Context.PathServer_PathShare.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PathServer_PathShare
        [MVC02.Models.PathServer_PathShare](T3.[PathServer_PathShare.PathServer_PathShare_Source], T3.[PathServer_PathShare.PathServer_PathShare_Target])
    FROM (
        SELECT -- Constructing PathServer_PathShare_Source
            CreateRef(MVC02Context.pathServer, row(T2.[PathServer_PathShare.PathServer_PathShare_Source.ID]), [MVC02.Models.PathServer]) AS [PathServer_PathShare.PathServer_PathShare_Source], 
            T2.[PathServer_PathShare.PathServer_PathShare_Target]
        FROM (
            SELECT -- Constructing PathServer_PathShare_Target
                T1.[PathServer_PathShare.PathServer_PathShare_Source.ID], 
                CreateRef(MVC02Context.pathShare, row(T1.[PathServer_PathShare.PathServer_PathShare_Target.ID]), [MVC02.Models.PathShare]) AS [PathServer_PathShare.PathServer_PathShare_Target]
            FROM (
                SELECT 
                    T.pathServer AS [PathServer_PathShare.PathServer_PathShare_Source.ID], 
                    T.pathShare AS [PathServer_PathShare.PathServer_PathShare_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.PathServerPathShare AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MVC02Context.Executable_PathServers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Executable_PathServers
        [MVC02.Models.Executable_PathServers](T3.[Executable_PathServers.Executable_PathServers_Source], T3.[Executable_PathServers.Executable_PathServers_Target])
    FROM (
        SELECT -- Constructing Executable_PathServers_Source
            CreateRef(MVC02Context.executable, row(T2.[Executable_PathServers.Executable_PathServers_Source.ID]), [MVC02.Models.Executable]) AS [Executable_PathServers.Executable_PathServers_Source], 
            T2.[Executable_PathServers.Executable_PathServers_Target]
        FROM (
            SELECT -- Constructing Executable_PathServers_Target
                T1.[Executable_PathServers.Executable_PathServers_Source.ID], 
                CreateRef(MVC02Context.pathServer, row(T1.[Executable_PathServers.Executable_PathServers_Target.ID]), [MVC02.Models.PathServer]) AS [Executable_PathServers.Executable_PathServers_Target]
            FROM (
                SELECT 
                    T.pathServer AS [Executable_PathServers.Executable_PathServers_Source.ID], 
                    T.executable AS [Executable_PathServers.Executable_PathServers_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ExecutablePathServer AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MVC02Context.Executable_PrimaryFunctions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Executable_PrimaryFunctions
        [MVC02.Models.Executable_PrimaryFunctions](T3.[Executable_PrimaryFunctions.Executable_PrimaryFunctions_Source], T3.[Executable_PrimaryFunctions.Executable_PrimaryFunctions_Target])
    FROM (
        SELECT -- Constructing Executable_PrimaryFunctions_Source
            CreateRef(MVC02Context.executable, row(T2.[Executable_PrimaryFunctions.Executable_PrimaryFunctions_Source.ID]), [MVC02.Models.Executable]) AS [Executable_PrimaryFunctions.Executable_PrimaryFunctions_Source], 
            T2.[Executable_PrimaryFunctions.Executable_PrimaryFunctions_Target]
        FROM (
            SELECT -- Constructing Executable_PrimaryFunctions_Target
                T1.[Executable_PrimaryFunctions.Executable_PrimaryFunctions_Source.ID], 
                CreateRef(MVC02Context.executableFunctions, row(T1.[Executable_PrimaryFunctions.Executable_PrimaryFunctions_Target.ID]), [MVC02.Models.PrimaryFunction]) AS [Executable_PrimaryFunctions.Executable_PrimaryFunctions_Target]
            FROM (
                SELECT 
                    T.primaryFunction AS [Executable_PrimaryFunctions.Executable_PrimaryFunctions_Source.ID], 
                    T.executable AS [Executable_PrimaryFunctions.Executable_PrimaryFunctions_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ExecutablePrimaryFunction AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MVC02Context.Config_Executables.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Config_Executables
        [MVC02.Models.Config_Executables](T3.[Config_Executables.Config_Executables_Source], T3.[Config_Executables.Config_Executables_Target])
    FROM (
        SELECT -- Constructing Config_Executables_Source
            CreateRef(MVC02Context.config, row(T2.[Config_Executables.Config_Executables_Source.ID]), [MVC02.Models.Config]) AS [Config_Executables.Config_Executables_Source], 
            T2.[Config_Executables.Config_Executables_Target]
        FROM (
            SELECT -- Constructing Config_Executables_Target
                T1.[Config_Executables.Config_Executables_Source.ID], 
                CreateRef(MVC02Context.executable, row(T1.[Config_Executables.Config_Executables_Target.ID]), [MVC02.Models.Executable]) AS [Config_Executables.Config_Executables_Target]
            FROM (
                SELECT 
                    T.executable AS [Config_Executables.Config_Executables_Source.ID], 
                    T.config AS [Config_Executables.Config_Executables_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ConfigExecutable AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MVC02Context.Config_JPlanLOBs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Config_JPlanLOBs
        [MVC02.Models.Config_JPlanLOBs](T3.[Config_JPlanLOBs.Config_JPlanLOBs_Source], T3.[Config_JPlanLOBs.Config_JPlanLOBs_Target])
    FROM (
        SELECT -- Constructing Config_JPlanLOBs_Source
            CreateRef(MVC02Context.config, row(T2.[Config_JPlanLOBs.Config_JPlanLOBs_Source.ID]), [MVC02.Models.Config]) AS [Config_JPlanLOBs.Config_JPlanLOBs_Source], 
            T2.[Config_JPlanLOBs.Config_JPlanLOBs_Target]
        FROM (
            SELECT -- Constructing Config_JPlanLOBs_Target
                T1.[Config_JPlanLOBs.Config_JPlanLOBs_Source.ID], 
                CreateRef(MVC02Context.jPlanLOB, row(T1.[Config_JPlanLOBs.Config_JPlanLOBs_Target.ID]), [MVC02.Models.JPlanLOB]) AS [Config_JPlanLOBs.Config_JPlanLOBs_Target]
            FROM (
                SELECT 
                    T.jPlanLOB AS [Config_JPlanLOBs.Config_JPlanLOBs_Source.ID], 
                    T.config AS [Config_JPlanLOBs.Config_JPlanLOBs_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ConfigJPlanLOB AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MVC02Context.Config_Plans.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Config_Plans
        [MVC02.Models.Config_Plans](T3.[Config_Plans.Config_Plans_Source], T3.[Config_Plans.Config_Plans_Target])
    FROM (
        SELECT -- Constructing Config_Plans_Source
            CreateRef(MVC02Context.config, row(T2.[Config_Plans.Config_Plans_Source.ID]), [MVC02.Models.Config]) AS [Config_Plans.Config_Plans_Source], 
            T2.[Config_Plans.Config_Plans_Target]
        FROM (
            SELECT -- Constructing Config_Plans_Target
                T1.[Config_Plans.Config_Plans_Source.ID], 
                CreateRef(MVC02Context.plan, row(T1.[Config_Plans.Config_Plans_Target.ID]), [MVC02.Models.Plan]) AS [Config_Plans.Config_Plans_Target]
            FROM (
                SELECT 
                    T.plan AS [Config_Plans.Config_Plans_Source.ID], 
                    T.config AS [Config_Plans.Config_Plans_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ConfigPlan AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MVC02Context.App_Plans.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing App_Plans
        [MVC02.Models.App_Plans](T3.[App_Plans.App_Plans_Source], T3.[App_Plans.App_Plans_Target])
    FROM (
        SELECT -- Constructing App_Plans_Source
            CreateRef(MVC02Context.app, row(T2.[App_Plans.App_Plans_Source.ID]), [MVC02.Models.App]) AS [App_Plans.App_Plans_Source], 
            T2.[App_Plans.App_Plans_Target]
        FROM (
            SELECT -- Constructing App_Plans_Target
                T1.[App_Plans.App_Plans_Source.ID], 
                CreateRef(MVC02Context.plan, row(T1.[App_Plans.App_Plans_Target.ID]), [MVC02.Models.Plan]) AS [App_Plans.App_Plans_Target]
            FROM (
                SELECT 
                    T.app AS [App_Plans.App_Plans_Source.ID], 
                    T.plan AS [App_Plans.App_Plans_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.AppPlan AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
